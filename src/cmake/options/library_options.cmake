# [2]

# -------------------------------------------------------------------------------------- #
# Конфигурация опций для сборки и управления параметрами библиотеки                      #
#                                                                                        #
# Этот скрипт задает различные опции конфигурации,                                       #
# позволяя пробрасывать их в компилятор как определения.                                 #
#                                                                                        #
# Эти опции влияют на поведение библиотеки, определяя,                                   #
# как именно будет происходить сборка, импорт, экспорт символов                          #
# и использование аллокаторов и переменных в многопоточном режиме.                       #
# -------------------------------------------------------------------------------------- #

# Опция:
#
#     SE_LIBRARY_OPTION_SHARED_BUILD
#
# Описание:
#
#     Эта опция CMake, SE_LIBRARY_OPTION_SHARED_BUILD,
#     управляет конфигурацией сборки для создания общей (разделяемой) библиотеки.
#
#     Когда эта опция включена (ON),
#     она указывает, что проект должен быть собран как общая библиотека.
#
#     Общие библиотеки — это динамически связываемые библиотеки,
#     которые могут быть загружены программами во время выполнения,
#     если им требуется их функциональность.
#
#     Этот параметр полезен, когда нужно разделить код на модули,
#     которые могут быть загружены несколькими приложениями одновременно.
#
# Использование:
#
#     ON: Указывает, что проект должен быть собран как общая библиотека.
#     OFF: Отключает сборку проекта как общей библиотеки,
#          проект будет собран как статическая библиотека
#          или другой тип бинарного артефакта.
#
# Примечание:
#
#     Выбор между сборкой общей или статической библиотеки
#     может повлиять на то, как результирующий код будет
#     связываться с другими программами.
#
#     Общие библиотеки предлагают большую гибкость во время выполнения,
#     но могут вносить дополнительные сложности.
#
option(SE_LIBRARY_OPTION_SHARED_BUILD
        "Создать общую динамическую библиотеку." ON)

# Опция:
#
#     SE_LIBRARY_OPTION_STATIC_BUILD
#
# Описание:
#
#     Эта опция CMake, SE_LIBRARY_OPTION_STATIC_BUILD,
#     управляет конфигурацией сборки для создания статической библиотеки.
#
#     Когда эта опция включена (ON),
#     она указывает, что проект должен быть собран как статическая библиотека.
#
#     Статические библиотеки — это библиотеки, которые связываются с приложением
#     на этапе компиляции и включаются в итоговый бинарник. Они не требуют наличия
#     внешнего файла библиотеки при запуске программы.
#
#     Этот параметр полезен, когда необходимо объединить код в единую программу
#     и избежать зависимости от внешних библиотек во время выполнения.
#
# Использование:
#
#     ON: Указывает, что проект должен быть собран как статическая библиотека.
#     OFF: Отключает сборку проекта как статической библиотеки,
#          проект будет собран как общая динамическая библиотека
#          или другой тип бинарного артефакта.
#
# Примечание:
#
#     Выбор между сборкой общей или статической библиотеки
#     может повлиять на то, как результирующий код будет
#     связываться с другими программами.
#
#     Статические библиотеки могут быть более производительными
#     в некоторых случаях, так как они не требуют дополнительного
#     времени на загрузку во время выполнения, но они также
#     увеличивают размер итогового бинарного файла.
#
option(SE_LIBRARY_OPTION_STATIC_BUILD
        "Создать статическую библиотеку." OFF)

# Опция:
#
#     SE_LIBRARY_OPTION_SEGMENTED_ARCH
#
# Описание:
#
#     Опция CMake SE_LIBRARY_OPTION_SEGMENTED_ARCH указывает, использует ли целевая
#     архитектура сегментированную модель памяти. При включении этой опции (ON)
#     требуется вручную определить соответствующие макросы с необходимыми значениями в проекте.
#
# Использование:
#
#     ON: Указывает, что целевая архитектура использует сегментированную модель памяти
#         и требует определения специальных макросов.
#     OFF: Целевая архитектура не использует сегментированную модель памяти,
#          либо необходимые макросы уже предопределены.
#
# Примечание:
#
#     Включение этой опции важно для архитектур,
#     где размер типа SE_usize_t или SE_ssize_t меньше размера указателя.
#     Это гарантирует, что библиотека SE корректно учитывает архитектурные особенности,
#     что критично для правильной работы операций, связанных с памятью.
#
option(SE_LIBRARY_OPTION_SEGMENTED_ARCH
        "Указывает, что целевая архитектура использует модель сегментированной памяти." OFF)

# Опция:
#
#     SE_LIBRARY_OPTION_RUNTIME_ALLOCATOR_INIT_STDLIB
#
# Описание:
#
#     Опция CMake SE_LIBRARY_OPTION_RUNTIME_ALLOCATOR_INIT_STDLIB определяет,
#     должна ли стандартная библиотека использоваться для инициализации аллокатора
#     в режиме выполнения в рамках проекта SE.
#
#     Включение этой опции (ON) обеспечивает инициализацию аллокатора
#     в режиме выполнения с использованием функций стандартной библиотеки.
#
# Использование:
#
#     ON: Использовать функции стандартной библиотеки для инициализации аллокатора в режиме выполнения.
#     OFF: Не использовать функции стандартной библиотеки для инициализации аллокатора в режиме выполнения,
#          что может потребовать кастомных или альтернативных процедур инициализации.
#
# Примечание:
#
#     Использование стандартной библиотеки для инициализации аллокатора в режиме выполнения
#     может упростить разработку и сопровождение за счет использования проверенных и переносимых функций.
#     Отключение этой опции может потребоваться для специфических нестандартных сред выполнения
#     или пользовательских реализаций аллокаторов.
#
option(SE_LIBRARY_OPTION_RUNTIME_ALLOCATOR_INIT_STDLIB
        "Использовать функции из stdlib для инициализации распределителя времени выполнения." ON)

# Опция:
#
#     SE_LIBRARY_OPTION_TERMINATE_INIT_STDLIB
#
# Описание:
#
#     Определяет, инициализировать ли стандартный обработчик аварийного завершения (`abort()`)
#     по умолчанию в рамках фреймворка SE.
#
#     - Если опция включена (ON), глобальный обработчик `m_runtime_terminate`
#       инициализируется функцией `abort()` из стандартной библиотеки C.
#     - Если опция отключена (OFF), обработчик устанавливается в `nullptr`,
#       и его необходимо явно задать через `se_runtime_terminate_set()`.
#
# Использование:
#
#     ON (по умолчанию):
#         Использовать `abort()` для обработки аварийного завершения.
#         Это обеспечивает предсказуемое поведение, но может быть нежелательно
#         в специфических окружениях (например, embedded).
#
#     OFF:
#         Не инициализировать обработчик. Требуется явный вызов
#         `se_runtime_terminate_set()` для установки кастомного обработчика.
#         Полезно, если требуется альтернативное поведение (логирование,
#         перезапуск процесса и т. д.).
#
# Примечание:
#
#     Даже при включённой опции поведение можно переопределить в runtime
#     с помощью `se_runtime_terminate_set()`.
#
option(SE_LIBRARY_OPTION_TERMINATE_INIT_STDLIB
        "Инициализировать обработчик аварийного завершения (m_runtime_terminate) как abort()." ON)

# Опция:
#
#     SE_LIBRARY_OPTION_FILL_ZERO_AFTER_MEMORY_ALLOCATE
#
# Описание:
#
#     Опция CMake SE_LIBRARY_OPTION_FILL_ZERO_AFTER_MEMORY_ALLOCATE определяет,
#     должна ли недавно выделенная память в проекте SE инициализироваться нулями.
#
#     Установка этой опции в положение ON (по умолчанию) гарантирует,
#     что при выделении памяти блок автоматически заполняется нулями,
#     предотвращая наличие случайных или потенциально конфиденциальных данных
#     в неинициализированной памяти.
#
# Использование:
#
#     ON: Автоматически заполняет нулями вновь выделенную память.
#         Это гарантирует, что выделенная память чистая и предсказуемая,
#         что помогает избежать ошибок, связанных с неинициализированной памятью.
#     OFF: Память выделяется без инициализации, что может быть уместно
#          для сценариев, где важна производительность и инициализация
#          выполняется вручную.
#
# Примечание:
#
#     Включение заполнения нулями после выделения памяти (ON) может помочь
#     предотвратить потенциальные риски безопасности и неопределенное поведение,
#     возникающее при чтении неинициализированной памяти. Однако это может
#     вызвать дополнительные затраты времени, связанные с обнулением памяти.
#     Отключите эту опцию, если производительность памяти критична и
#     инициализация управляется другими способами.
#
option(SE_LIBRARY_OPTION_FILL_ZERO_AFTER_MEMORY_ALLOCATE
        "Новый выделенный участок памяти заполняется нулями." ON)

# Опция:
#
#     SE_LIBRARY_OPTION_THREAD_LOCAL
#
# Описание:
#
#     Опция CMake SE_LIBRARY_OPTION_THREAD_LOCAL определяет,
#     должны ли статические переменные в проекте объявляться
#     со спецификатором `thread` для хранения на уровне потока.
#
#     Установка этой опции в значение ON (по умолчанию) обеспечит выделение
#     всех статических переменных отдельно для каждого потока.
#     Это может быть полезно для улучшения потокобезопасности и предотвращения
#     гонок данных в многопоточной среде, поскольку каждый поток будет иметь
#     собственный экземпляр статических переменных.
#
# Использование:
#
#     ON: Объявляет статические переменные с использованием спецификатора `thread`,
#         гарантируя, что каждый поток имеет свой собственный экземпляр этих переменных.
#     OFF: Использует стандартное поведение статических переменных, когда они общие
#          для всех потоков, что может быть подходящим для случаев, когда
#          данные на уровне потока не требуются или управляются иным образом.
#
# Примечание:
#
#     Использование `thread` может повысить потокобезопасность,
#     обеспечивая отсутствие общих статических переменных между потоками,
#     что помогает предотвратить нежелательное взаимодействие между потоками.
#
#     Однако это может также привести к дополнительным затратам памяти
#     из-за хранения на уровне потока и может повлиять на производительность
#     в некоторых случаях. Выбирайте эту опцию в зависимости от модели потоков
#     и требований вашего приложения.
#
option(SE_LIBRARY_OPTION_THREAD_LOCAL
        "Все статические переменные используют модификатор потока." ON)

# Опция:
#
#     SE_LIBRARY_OPTION_ERROR_DESC
#
# Описание:
#
#     Опция CMake SE_LIBRARY_OPTION_ERROR_DESC определяет,
#     должна ли библиотека включать поддержку описаний ошибок
#     в механизмах обработки исключений runtime (например, в макросе `se_runtime_throw`).
#
#     Установка этой опции в значение ON (по умолчанию) добавляет возможность
#     передавать текстовое описание ошибки вместе с кодом ошибки в runtime исключениях.
#     Это полезно для диагностики и отладки, так как предоставляет дополнительную
#     информацию о причине исключения, упрощая анализ проблем в коде.
#
# Использование:
#
#     ON: Включает поддержку описаний ошибок в исключениях runtime.
#         Макрос `se_runtime_throw` будет принимать дополнительный параметр `desc`
#         (строку с описанием ошибки), которая сохраняется в структуре `se_error_t`.
#     OFF: Отключает поддержку описаний ошибок. Макрос `se_runtime_throw`
#          будет работать только с кодом ошибки, без возможности указания описания,
#          что уменьшает объем кода и может быть предпочтительно для оптимизации
#          в релизных сборках.
#
# Примечание:
#
#     Включение описаний ошибок (`ON`) улучшает читаемость и информативность
#     логов или отчетов об ошибках, что особенно полезно в процессе разработки
#     и отладки. Однако это может привести к небольшому увеличению размера
#     бинарного файла и дополнительным накладным расходам на обработку строк.
#
#     Отключение этой опции (`OFF`) подходит для случаев, когда приоритет
#     отдается минималистичности и производительности, а коды ошибок
#     достаточно информативны сами по себе.
#
option(SE_LIBRARY_OPTION_ERROR_DESC
        "Включает поддержку описаний ошибок в runtime исключениях." OFF)
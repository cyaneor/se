# -------------------------------------------------------------------------------------- #
# Конфигурация макросов и настроек для сборки                                            #
#                                                                                        #
# Этот скрипт задает и пробрасывает необходимые параметры                                #
# в библиотеку через определения компилятора.                                            #
# -------------------------------------------------------------------------------------- #

list(APPEND SE_TARGET_PUBLIC_COMPILE_DEFINITIONS
        # Определение имени операционной системы, используемого в сборке.
        # Переменная CMAKE_SYSTEM_NAME содержит имя ОС (например, Windows, Linux, Darwin).
        SE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}

        # Определение процессора системы, на котором происходит сборка.
        # Переменная CMAKE_SYSTEM_PROCESSOR содержит архитектуру процессора (например, x86_64, armv7).
        SE_SYSTEM_PROCESSOR="${CMAKE_SYSTEM_PROCESSOR}"

        # SE_RUNTIME_EXCEPTION_CATCH_STACK_MAX определяет максимальное
        # количество сохраненных кадров перехвата в библиотеке.
        SE_RUNTIME_EXCEPTION_CATCH_STACK_MAX=255

        # Устанавливаем тип диапазона памяти.
        # Данная переменная определяет тип диапазона, который будет использоваться в проекте.
        #
        # Доступные типы диапазонов:
        # 0 - Закрытый диапазон (SE_MEMORY_RANGE_TYPE_CLOSED)
        # 1 - Левый полуоткрытый диапазон (SE_MEMORY_RANGE_TYPE_LEFT_OPENED)
        # 2 - Правый полуоткрытый диапазон (SE_MEMORY_RANGE_TYPE_RIGHT_OPENED)
        # 3 - Открытый диапазон (SE_MEMORY_RANGE_TYPE_OPENED)
        # SE_MEMORY_RANGE_TYPE=2

        # Макрос SE_DYNAMIC_BLOCK_GROWTH_FACTOR задает коэффициент роста размера памяти
        # при перераспределении в динамических структурах данных. Этот коэффициент определяет
        # на сколько будет увеличен размер структуры данных при каждом перераспределении памяти.
        #
        # Если необходимо использовать коэффициент роста с плавающей запятой (например, 1.5),
        # его следует умножить на 1000, чтобы работать с целыми числами
        # и избежать использования типа `float`.
        #
        # Это позволяет улучшить производительность и уменьшить использование памяти,
        # что важно для микроконтроллеров и встроенных систем.
        #
        # Например, если вы хотите задать коэффициент роста как 1.5, используйте:
        #    #define SE_DYNAMIC_BLOCK_GROWTH_FACTOR 1500  # Это эквивалентно 1.5 * 1000
        #
        # В расчете нового размера памяти будет использоваться целочисленное умножение с последующим делением:
        # const SE_usize_t new_capacity = (capacity * SE_DYNAMIC_BLOCK_GROWTH_FACTOR) / 1000;
        #
        # Если коэффициент роста установлен в целое число, например 2, то это также будет работать:
        #    #define SE_DYNAMIC_BLOCK_GROWTH_FACTOR 2000  # Это эквивалентно 2.0 * 1000
        #
        # В обоих случаях, при расчете нового размера памяти, не потребуется использование типа `float`,
        # что уменьшит возможные ошибки, связанные с точностью или производительностью.
        SE_DYNAMIC_BLOCK_GROWTH_FACTOR=1500
)
/**
 * @file static_cast.h
 * @brief Заголовочный файл для макросов приведения типов.
 *
 * Этот файл содержит определение макроса `se_static_cast`,
 * который обеспечивает универсальный способ приведения типов,
 * зависящий от используемого языка (C или C++).
 *
 * @details В языке C используется простое приведение типов, разрешенное стандартом C.
 *          В языке C++ используется более безопасный оператор `static_cast`,
 *          предоставляющий дополнительные проверки времени компиляции.
 *
 *          Этот подход упрощает использование приведения типов
 *          в многоплатформенных и многоязыковых проектах.
 *
 * @note Макрос `se_static_cast` удобен для использования в проектах,
 *       которые могут быть скомпилированы как компилятором C++,
 *       так и компилятором C.
 */

#ifndef SE_STATIC_CAST_H
#define SE_STATIC_CAST_H

/**
 * @def se_static_cast(T, V)
 * @brief Статическое приведение типа.
 * @details Этот макрос обеспечивает безопасное приведение типа переменной @p V к типу @p T.
 *
 * В зависимости от того, используется ли компилятор C++ или нет,
 * поведение макроса различается:
 * - В языке C++ используется оператор `static_cast`,
 *   который является безопасным методом приведения типов.
 * - В языке C используется простое приведение типов,
 *   как это разрешено в стандарте C.
 *
 * @param T Целевой тип, к которому нужно привести значение.
 * @param V Значение, которое необходимо привести.
 *
 * Пример использования:
 * @code{.cpp}
 * int a = 5;
 * double b = se_static_cast(double, a); // В C++ это приведет тип int к double
 * @endcode
 */
#ifndef __cplusplus
#    define se_static_cast(T, V) ((T)V) ///< В языке C используется приведение типов через (T)V
#else
#    define se_static_cast(T, V) static_cast<T>(V) ///< В C++ используется оператор static_cast
#endif

#endif // SE_STATIC_CAST_H

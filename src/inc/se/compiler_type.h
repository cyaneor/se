/**
 * @file compiler_type.h
 * @brief Определяет макросы для идентификации используемого компилятора.
 *
 * Этот заголовочный файл содержит макросы для распознавания компилятора,
 * который используется для сборки кода. С помощью условной компиляции
 * можно определить компилятор (например, GCC, MSVC или Clang)
 * и адаптировать поведение программы для каждого из них.
 *
 * Макросы, определенные в этом файле,
 * назначают уникальные значения для каждого поддерживаемого компилятора:
 * - `SE_COMPILER_TYPE_GCC` для GNU Compiler Collection (GCC)
 * - `SE_COMPILER_TYPE_MSVC` для Microsoft Visual C++ (MSVC)
 * - `SE_COMPILER_TYPE_CLANG` для компилятора Clang
 * - `SE_COMPILER_TYPE_UNKNOWN` для неизвестного или нераспознанного компилятора
 *
 * Макрос `SE_COMPILER_TYPE` автоматически устанавливается в соответствии с обнаруженным
 * компилятором, что позволяет использовать его для кроссплатформенного кода
 * и обеспечивать совместимость с различными инструментами сборки.
 *
 * @note Этот файл предназначен для использования в средах,
 *       где важно распознавать компилятор для управления
 *       специфическими настройками или обходными путями.
 */

#ifndef SE_COMPILER_TYPE_H
#define SE_COMPILER_TYPE_H

/**
 * @def SE_COMPILER_TYPE_UNKNOWN
 * @brief Определяет код для неизвестного типа компилятора.
 *
 * Этот макрос используется для обозначения неизвестного или нераспознанного
 * компилятора в случае, если система не смогла определить текущий компилятор.
 *
 * @note Используется в системах, где требуется выявление или условная компиляция
 *       в зависимости от типа компилятора.
 */
#define SE_COMPILER_TYPE_UNKNOWN 0

/**
 * @def SE_COMPILER_TYPE_GCC
 * @brief Определяет код для компилятора GCC.
 *
 * Этот макрос используется для обозначения компилятора GCC.
 * Он может применяться в условной компиляции для идентификации кода,
 * который должен быть скомпилирован только с использованием GCC.
 *
 * @note Этот макрос полезен при написании кроссплатформенного кода,
 *       где требуется разное поведение в зависимости от используемого компилятора.
 */
#define SE_COMPILER_TYPE_GCC 1

/**
 * @def SE_COMPILER_TYPE_MSVC
 * @brief Определяет код для компилятора MSVC.
 *
 * Этот макрос используется для обозначения компилятора Microsoft Visual C++ (MSVC).
 * Он может применяться в условной компиляции для идентификации кода,
 * который должен быть скомпилирован только с использованием MSVC.
 *
 * @note Этот макрос полезен при разработке кроссплатформенного кода,
 *       где требуется разное поведение в зависимости от используемого компилятора.
 */
#define SE_COMPILER_TYPE_MSVC 2

/**
 * @def SE_COMPILER_TYPE_CLANG
 * @brief Определяет код для компилятора Clang.
 *
 * Этот макрос используется для обозначения компилятора Clang.
 * Он может применяться в условной компиляции для идентификации кода,
 * который должен быть скомпилирован только с использованием Clang.
 *
 * @note Этот макрос полезен при написании кроссплатформенного кода,
 *       где требуется разное поведение в зависимости от используемого компилятора.
 */
#define SE_COMPILER_TYPE_CLANG 3

/**
 * @def SE_COMPILER_TYPE
 * @brief Определяет тип компилятора на основе обнаруженных макросов.
 *
 * Этот макрос устанавливает код для текущего компилятора, определяя его
 * с помощью заранее установленных макросов, предоставляемых компиляторами.
 * Результат используется для условной компиляции, чтобы изменить поведение
 * программы в зависимости от компилятора.
 *
 * @details
 * Возможные значения:
 * - `SE_COMPILER_TYPE_CLANG` — для компилятора Clang
 * - `SE_COMPILER_TYPE_MSVC` — для Microsoft Visual C++ (MSVC)
 * - `SE_COMPILER_TYPE_GCC` — для GNU Compiler Collection (GCC)
 * - `SE_COMPILER_TYPE_UNKNOWN` — если компилятор не распознан
 *
 * @note Этот макрос полезен в кроссплатформенной разработке,
 *       когда необходимо учитывать особенности различных компиляторов.
 */
#if defined(__clang__)
#    define SE_COMPILER_TYPE SE_COMPILER_TYPE_CLANG
#elif defined(_MSC_VER)
#    define SE_COMPILER_TYPE SE_COMPILER_TYPE_MSVC
#elif defined(__GNUC__)
#    define SE_COMPILER_TYPE SE_COMPILER_TYPE_GCC
#else
#    define SE_COMPILER_TYPE SE_COMPILER_TYPE_UNKNOWN
#endif

#endif // SE_COMPILER_TYPE_H
